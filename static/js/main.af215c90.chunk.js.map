{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","mainContainerFillClass","window","innerHeight","innerWidth","state","showcase","addEventListener","e","target","setState","fetch","then","res","json","this","className","href","map","item","key","title","link","dangerouslySetInnerHTML","__html","text1","text2","text3","text4","id","src","frameBorder","scrolling","width","height","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SA+FeA,G,kBA3Fb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAMC,EAA0BC,OAAOC,YAAcD,OAAOE,WAAa,IACrE,aACA,YALa,OAOjB,EAAKC,MAAQ,CACXC,SAAU,GACVL,0BAGFC,OAAOK,iBAAiB,UAAU,SAAAC,GAChC,IAAMP,EAA0BO,EAAEC,OAAON,YAAcK,EAAEC,OAAOL,WAAa,IACzE,aACA,YAEJ,EAAKM,UAAS,iBAAO,CACnBT,gCAlBa,E,iNAwBMU,MAAM,iBAAiBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,U,OAAxDR,E,OAENS,KAAKL,UAAS,iBAAO,CACnBJ,e,qIAIM,IAAD,EACsCS,KAAKV,MAA1CC,EADD,EACCA,SAAUL,EADX,EACWA,uBAElB,OACE,yBAAKe,UAAS,cAASf,IACrB,gCACE,yBAAKe,UAAU,UACb,4BAAI,uBAAGC,KAAK,KAAR,sBAIR,8BACE,yBAAKD,UAAU,SACb,yDAGF,yBAAKA,UAAU,iBACZV,EAASY,KAAI,SAAAC,GAAI,OAChB,uBACEC,IAAKD,EAAKE,MACVJ,KAAME,EAAKG,KACXN,UAAU,gBAEV,6BACE,wBAAIO,wBAAyB,CAAEC,OAAQL,EAAKE,SAC5C,uBAAGE,wBAAyB,CAAEC,OAAQL,EAAKM,SAC3C,uBAAGF,wBAAyB,CAAEC,OAAQL,EAAKO,SAC3C,uBAAGH,wBAAyB,CAAEC,OAAQL,EAAKQ,SAC3C,uBAAGJ,wBAAyB,CAAEC,OAAQL,EAAKS,SAC3C,uBAAGL,wBAAyB,CAAEC,OAAQL,EAAKG,eAOrD,gCACE,yBAAKN,UAAU,UACb,yBAAKa,GAAG,eACN,4BAAQR,MAAM,yDAAyDS,IAAI,qUAAqUC,YAAY,IAAIC,UAAU,KAAKC,MAAM,MAAMC,OAAO,QADpc,SAEE,4BAAQb,MAAM,uDAAuDS,IAAI,kUAAkUC,YAAY,IAAIC,UAAU,KAAKC,MAAM,MAAMC,OAAO,QAI7b,yBAAKlB,UAAU,MACb,2BACE,6FAAwE,6BACxE,4DAKN,kCAAO,uBAAGC,KAAK,oBAAR,iBAAP,KAAwD,uBAAGA,KAAK,iDAAR,0BAAxD,uBAAiK,uBAAGA,KAAK,0BAAR,qCAAjK,QAA4O,uBAAGA,KAAK,uCAAR,qBAA5O,Y,GApFMkB,cCSEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.af215c90.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const mainContainerFillClass = (window.innerHeight > window.innerWidth / 1.7)\r\n      ? 'fillheight'\r\n      : 'fillwidth';\r\n\r\n    this.state = {\r\n      showcase: [],\r\n      mainContainerFillClass\r\n    };\r\n\r\n    window.addEventListener('resize', e => {\r\n      const mainContainerFillClass = (e.target.innerHeight > e.target.innerWidth / 1.7)\r\n        ? 'fillheight'\r\n        : 'fillwidth';\r\n\r\n      this.setState(() => ({\r\n        mainContainerFillClass\r\n      }));\r\n    });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const showcase = await fetch('showcase.json').then(res => res.json());\r\n\r\n    this.setState(() => ({\r\n      showcase\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { showcase, mainContainerFillClass } = this.state;\r\n\r\n    return (\r\n      <div className={`App ${mainContainerFillClass}`}>\r\n        <header>\r\n          <div className=\"header\">\r\n            <h3><a href=\"/\">EternalVoid.net</a></h3>\r\n          </div>\r\n        </header>\r\n\r\n        <main>\r\n          <div className=\"title\">\r\n            <h1>The Eternal Void Network</h1>\r\n          </div>\r\n\r\n          <div className=\"showcaseItems\">\r\n            {showcase.map(item => (\r\n              <a\r\n                key={item.title}\r\n                href={item.link}\r\n                className=\"showcaseItem\"\r\n              >\r\n                <div>\r\n                  <h3 dangerouslySetInnerHTML={{ __html: item.title }} />\r\n                  <p dangerouslySetInnerHTML={{ __html: item.text1 }} />\r\n                  <p dangerouslySetInnerHTML={{ __html: item.text2 }} />\r\n                  <p dangerouslySetInnerHTML={{ __html: item.text3 }} />\r\n                  <p dangerouslySetInnerHTML={{ __html: item.text4 }} />\r\n                  <p dangerouslySetInnerHTML={{ __html: item.link }} />\r\n                </div>\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </main>\r\n\r\n        <footer>\r\n          <div className=\"footer\">\r\n            <div id=\"gameServers\">\r\n              <iframe title=\"The Eternal Void Network Unreal Tournament 2004 Server\" src=\"https://cache.gametracker.com/components/html0/?host=ut2004.eternalvoid.net:7777&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe>  &nbsp;\r\n              <iframe title=\"The Eternal Void Network Ark Survival Evolved Server\" src=\"https://cache.gametracker.com/components/html0/?host=ark.eternalvoid.net:7777&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe>\r\n              {/* <iframe title=\"The Eternal Void Network Unreal Tournament 3 Server\" src=\"https://cache.gametracker.com/components/html0/?host=ut3.eternalvoid.net:7777&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe>  &nbsp; */}\r\n              {/* <iframe title=\"The Eternal Void Network Minecraft Server\" src=\"https://cache.gametracker.com/components/html0/?host=minecraft.eternalvoid.net:25565&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&showTopPlayers=0&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"412\"></iframe> */}\r\n\r\n              <div className=\"ut\">\r\n                <p>\r\n                  <span>The Eternal Void Network CA Unreal Tournament Pre-Alpha Hub</span><br />\r\n                  <span>ut.eternalvoid.net:7777</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <h4>By <a href=\"https://jccss.ca\">Jeremy Carter</a> &lt;<a href=\"mailto:Jeremy Carter <jeremy@jeremycarter.ca>\">jeremy@jeremycarter.ca</a>&gt; 2020, with art by <a href=\"https://prettyweird.ca\">Fern Vale Volante of Pretty Weird</a> and <a href=\"https://github.com/google/deepdream\">Google Deep Dream</a>.</h4>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}