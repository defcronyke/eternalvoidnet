{"version":3,"sources":["copyToClipboard.js","App.js","serviceWorker.js","index.js"],"names":["copyToClipboard","e","clickedItem","target","classList","contains","text","innerText","el","document","createElement","value","style","position","top","body","appendChild","select","execCommand","removeChild","console","log","addCopyToClipboardHoverText","itemsWithClass","getElementsByClassName","i","item","getAttribute","setAttribute","App","Component","constructor","props","super","mainContainerFillClass","window","innerHeight","innerWidth","this","state","showcase","addEventListener","setState","componentDidMount","fetch","then","res","json","render","className","onClick","href","class","map","link","dangerouslySetInnerHTML","__html","title","text1","text2","text3","text4","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAEO,SAASA,EAAgBC,GAC9B,MAAMC,EAAcD,EAAEE,OAEtB,IAAKD,IAAgBA,EAAYE,UAC/B,OAKF,IAFsBF,EAAYE,UAAUC,SAAS,mBAGnD,OAGF,MAAMC,EAAOJ,EAAYK,UAEzB,IAAKD,EACH,OAGF,MAAME,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQL,EACXE,EAAGI,MAAMC,SAAW,WACpBL,EAAGI,MAAME,IAAM,SACfL,SAASM,KAAKC,YAAYR,GAC1BA,EAAGS,SACHR,SAASS,YAAY,QACrBT,SAASM,KAAKI,YAAYX,GAC1BY,QAAQC,IAAI,IAAMf,EAAO,8BAGpB,SAASgB,IACd,MAAMC,EAAiBd,SAASe,uBAAuB,mBAEvD,GAAID,EACF,IAAK,MAAME,KAAKF,EAAgB,CAC9B,MAAMG,EAAOH,EAAeE,GAExBC,EAAKC,eAAiBD,EAAKC,aAAa,UAC1CD,EAAKE,aAAa,QAAS,+B,WCpCnC,MAAMC,UAAYC,YAChBC,YAAYC,GACVC,MAAMD,GAEN,MAAME,EAA0BC,OAAOC,YAAcD,OAAOE,WAAa,IACrE,aACA,YAEJC,KAAKC,MAAQ,CACXC,SAAU,GACVN,0BAGFC,OAAOM,iBAAiB,UAAUxC,IAChC,MAAMiC,EAA0BjC,EAAEE,OAAOiC,YAAcnC,EAAEE,OAAOkC,WAAa,IACzE,aACA,YAEJC,KAAKI,UAAS,MACZR,gCAKAS,oBAAqB,IAAD,wIACDC,MAAM,iBAAiBC,MAAKC,GAAOA,EAAIC,SADtC,OAClBP,EADkB,OAGxB,EAAKE,UAAS,MACZF,eAGFlB,IAPwB,6CAU1B0B,SAAU,MAAD,EACsCV,KAAKC,MAA1CC,EADD,EACCA,SAAUN,EADX,EACWA,uBAElB,OACE,sBAAKe,UAAS,cAASf,GAA0BgB,QAASlD,EAA1D,UAEE,iCACE,qBAAKiD,UAAU,SAAf,SACE,6BAAI,mBAAGE,KAAK,IAAIC,MAAM,OAAlB,mCAIR,iCACE,qBAAKH,UAAU,QAAf,SACE,4DAGF,qBAAKA,UAAU,gBAAf,SACGT,EAASa,KAAI3B,GACZ,mBAEEyB,KAAMzB,EAAK4B,KACXL,UAAU,eAHZ,SAKE,gCACE,oBAAIM,wBAAyB,CAAEC,OAAQ9B,EAAK+B,SAC5C,mBAAGF,wBAAyB,CAAEC,OAAQ9B,EAAKgC,SAC3C,mBAAGH,wBAAyB,CAAEC,OAAQ9B,EAAKiC,SAC3C,mBAAGJ,wBAAyB,CAAEC,OAAQ9B,EAAKkC,SAC3C,mBAAGL,wBAAyB,CAAEC,OAAQ9B,EAAKmC,SAC3C,mBAAGT,MAAM,OAAOG,wBAAyB,CAAEC,OAAQ9B,EAAK4B,YAVrD5B,EAAK+B,cAiBlB,iCACE,qBAAKR,UAAU,SAAf,SAiBE,qCAAO,mBAAGE,KAAK,mBAAmBC,MAAM,OAAjC,2BAAP,KAAqE,mBAAGD,KAAK,gDAAgDC,MAAM,OAA9D,oCAArE,uBAA2L,mBAAGD,KAAK,yBAAyBC,MAAM,OAAvC,+CAA3L,QAAmR,mBAAGD,KAAK,sCAAsCC,MAAM,OAApD,+BAAnR,eAQGvB,QCzFKiC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,cAAC,EAAD,IAASvC,SAAS0D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK0B,IACjCA,EAAaC,kB","file":"static/js/main.3581d346.chunk.js","sourcesContent":["/* Copy text to the clipboard if you click it and it's \nin a DOM element with the '.copyToClipboard' class. */\nexport function copyToClipboard(e) {\n  const clickedItem = e.target;\n\n  if (!clickedItem || !clickedItem.classList) {\n    return;\n  }\n\n  const containsClass = clickedItem.classList.contains('copyToClipboard');\n\n  if (!containsClass) {\n    return;\n  }\n\n  const text = clickedItem.innerText;\n\n  if (!text) {\n    return;\n  }\n\n  const el = document.createElement('textarea');\n  el.value = text;\n  el.style.position = 'absolute';\n  el.style.top = '-999em';\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  console.log('\"' + text + '\" copied to the clipboard.');\n}\n\nexport function addCopyToClipboardHoverText() {\n  const itemsWithClass = document.getElementsByClassName('copyToClipboard');\n\n  if (itemsWithClass) {\n    for (const i in itemsWithClass) {\n      const item = itemsWithClass[i];\n\n      if (item.getAttribute && !item.getAttribute('title')) {\n        item.setAttribute('title', 'click to copy to clipboard');\n      }\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { copyToClipboard, addCopyToClipboardHoverText } from './copyToClipboard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const mainContainerFillClass = (window.innerHeight > window.innerWidth / 1.7)\n      ? 'fillheight'\n      : 'fillwidth';\n\n    this.state = {\n      showcase: [],\n      mainContainerFillClass,\n    };\n\n    window.addEventListener('resize', e => {\n      const mainContainerFillClass = (e.target.innerHeight > e.target.innerWidth / 1.7)\n        ? 'fillheight'\n        : 'fillwidth';\n\n      this.setState(() => ({\n        mainContainerFillClass\n      }));\n    });\n  }\n\n  async componentDidMount() {\n    const showcase = await fetch('showcase.json').then(res => res.json());\n\n    this.setState(() => ({\n      showcase,\n    }));\n\n    addCopyToClipboardHoverText();\n  }\n\n  render() {\n    const { showcase, mainContainerFillClass } = this.state;\n\n    return (\n      <div className={`App ${mainContainerFillClass}`} onClick={copyToClipboard}>\n\n        <header>\n          <div className=\"header\">\n            <h3><a href=\"/\" class=\"link\">EternalVoid.net</a></h3>\n          </div>\n        </header>\n\n        <main>\n          <div className=\"title\">\n            <h1>The Eternal Void Network</h1>\n          </div>\n\n          <div className=\"showcaseItems\">\n            {showcase.map(item => (\n              <a\n                key={item.title}\n                href={item.link}\n                className=\"showcaseItem\"\n              >\n                <div>\n                  <h3 dangerouslySetInnerHTML={{ __html: item.title }} />\n                  <p dangerouslySetInnerHTML={{ __html: item.text1 }} />\n                  <p dangerouslySetInnerHTML={{ __html: item.text2 }} />\n                  <p dangerouslySetInnerHTML={{ __html: item.text3 }} />\n                  <p dangerouslySetInnerHTML={{ __html: item.text4 }} />\n                  <p class=\"link\" dangerouslySetInnerHTML={{ __html: item.link }} />\n                </div>\n              </a>\n            ))}\n          </div>\n        </main>\n\n        <footer>\n          <div className=\"footer\">\n            {/* <div id=\"gameServers\">\n              \n              <iframe title=\"Eternal Void Unreal Tournament 2004 Server\" src=\"https://cache.gametracker.com/components/html0/?host=ut2004.eternalvoid.net:7877&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe> &nbsp; \n\n              <iframe title=\"Eternal Void Unreal Tournament 3 Server\" src=\"https://cache.gametracker.com/components/html0/?host=ut3.eternalvoid.net:7777&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe>  &nbsp; \n              \n              <iframe title=\"The Eternal Void Network Ark Survival Evolved Server\" src=\"https://cache.gametracker.com/components/html0/?host=ark.eternalvoid.net:7777&bgColor=333333&fontColor=cccccc&titleBgColor=222222&titleColor=ff9900&borderColor=555555&linkColor=ffcc00&borderLinkColor=222222&showMap=1&currentPlayersHeight=100&showCurrPlayers=1&topPlayersHeight=100&showTopPlayers=1&showBlogs=0&width=240\" frameBorder=\"0\" scrolling=\"no\" width=\"240\" height=\"536\"></iframe> &nbsp; \n              \n              <div className=\"ut\">\n                <p>\n                  <span>The Eternal Void Network CA Unreal Tournament Pre-Alpha Hub</span><br />\n                  <span>ut.eternalvoid.net:7777</span>\n                </p>\n              </div>\n            </div> */}\n\n            <h4>By <a href=\"https://jccss.ca\" class=\"link\">Jeremy Carter</a> &lt;<a href=\"mailto:Jeremy Carter <jeremy@jeremycarter.ca>\" class=\"link\">jeremy@jeremycarter.ca</a>&gt; 2020, with art by <a href=\"https://prettyweird.ca\" class=\"link\">Fern Vale Volante of Pretty Weird</a> and <a href=\"https://github.com/google/deepdream\" class=\"link\">Google Deep Dream</a>.</h4>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}